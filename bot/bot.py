from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters, CallbackQueryHandler
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from PIL import Image
from dotenv import load_dotenv
import onnxruntime as ort
import numpy as np
import io
import os
import logging


logging.basicConfig(
    filename='bot.log',
    filemode='a',
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")


session = ort.InferenceSession("bot/trashnet.onnx")
classes = ["cardboard", "glass", "metal", "paper", "plastic", "trash"]


menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìÑ –û–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("üì¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ],
    resize_keyboard=True
)

def preprocess_image(image):
    image = image.resize((64, 64))
    image = np.array(image).astype(np.float32) / 255.0
    image = np.transpose(image, (2, 0, 1))
    image = np.expand_dims(image, axis=0)
    return image


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file = await photo.get_file()
    bio = await file.download_as_bytearray()
    
    image = Image.open(io.BytesIO(bio)).convert("RGB")
    input_tensor = preprocess_image(image)
    outputs = session.run(None, {"input": input_tensor})
    
    logger.info(f"outputs: {outputs}")
    
    predicted_index = int(np.argmax(outputs[0]))
    predicted_class = classes[predicted_index]
    
    await update.message.reply_text(
        f"üß† –û–±–Ω–∞—Ä—É–∂–µ–Ω –º—É—Å–æ—Ä: *{predicted_class}*",
        parse_mode="Markdown",
        reply_markup=menu_keyboard
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º—É—Å–æ—Ä–∞. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –Ω–∞ –Ω–µ–π.",
        reply_markup=menu_keyboard
    )


async def handle_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìÑ –û–ø–∏—Å–∞–Ω–∏–µ":
        await update.message.reply_text(
            "üîÑ *–£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º—É—Å–æ—Ä–∞ –ø–æ —Ñ–æ—Ç–æ* üì∏\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫—É–¥–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç:\n"
            "‚Üí –°—Ç–µ–∫–ª–æ ‚ôªÔ∏è\n"
            "‚Üí –ë—É–º–∞–≥–∞ üìÑ\n"
            "‚Üí –ú–µ—Ç–∞–ª–ª üß≤\n"
            "‚Üí –ö–∞—Ä—Ç–æ–Ω üì¶\n"
            "‚Üí –ü–ª–∞—Å—Ç–∏–∫ ü•§\n"
            "‚Üí –ü—Ä–æ—á–µ–µ üóëÔ∏è\n\n"
            "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*\n"
            "1. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—É—Ç—ã–ª–∫—É –∏–ª–∏ —É–ø–∞–∫–æ–≤–∫—É)\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–Ω–µ\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã!\n\n"
            "üå± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
    elif text == "üì¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text("üì¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \nGitHub: https://github.com/YuriHSE/garbage-classifier-bot")


def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    app = ApplicationBuilder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_command))
    
    app.run_polling()

if __name__ == "__main__":
    main()
